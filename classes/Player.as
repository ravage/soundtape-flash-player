package {	import flash.events.*;	import flash.display.*;	import flash.net.*;	import flash.display.Sprite;	import flash.media.*;	import flash.utils.*;	public class Player extends MovieClip {		private var params:Object;		private var path:String;		private var xml:XML;		private static var instance:Player;		private var track:Sound;		private var trackLength:uint;		private var channel:SoundChannel;		public function Player() {			if(instance) throw new Error("...");			instance = this;						stage.align = StageAlign.TOP_LEFT;			stage.scaleMode = StageScaleMode.NO_SCALE;			stage.addEventListener(Event.RESIZE, OnResize);			stage.dispatchEvent(new Event(Event.RESIZE));			//params = LoaderInfo(this.root.loaderInfo).parameters;			mcControls.btnPause.visible = false;			mcControls.mcVolume.VolumeControl = 10;			var peakTimer:Timer = new Timer(50);			peakTimer.addEventListener(TimerEvent.TIMER, OnTimerEvent);			peakTimer.start();			mcPlaylist.LoadXSPF();		}				public function Volume(value:Number) {			if(channel != null) {				var volume:SoundTransform = new SoundTransform();				volume.volume = value;   				channel.soundTransform = volume;			}		}				private function OnTimerEvent(e:Event) {			/*if(channel != null) {				leftPeak.height = channel.leftPeak * 50;				rightPeak.height = channel.rightPeak * 50;			}*/						if(mcPlaylist.Playing != null && mcPlaylist.Playing.IsLoaded) {				mcPlaying.mcTrackProgressBar.width = Math.round(channel.position * mcPlaying.width / track.length);			}		}				public static function GetInstance():Player {			if(!instance) {				return new Player();			}			return instance;		}				public static function GetPlaylist():Playlist {			return Player.GetInstance().mcPlaylist;		}				function OnResize(e:Event):void		{			mcControls.width = mcControls.stage.stageWidth;			mcPlaylistHolder.width = stage.stageWidth - mcPlaylistHolder.x - 2;			mcPlaylistHolder.height = stage.stageHeight - mcPlaylistHolder.y - 2;			mcPlaylist.mcMask.width = stage.stageWidth - mcPlaylist.x - 2;			mcPlaylist.mcMask.height = stage.stageHeight - mcPlaylist.y - 2;						mcPlaylist.mcBackground.width = stage.stageWidth - mcPlaylist.x - 2;			mcPlaylist.mcBackground.height = stage.stageHeight - mcPlaylist.y - 2;			mcPlaylist.mcMask.width = stage.stageWidth - mcPlaylist.x - 2;			mcPlaylist.mcMask.height = stage.stageHeight - mcPlaylist.y - 2;						mcControls.mcVolume.x = stage.stageWidth - mcControls.mcVolume.width - 10;			mcPlaying.width = mcControls.mcVolume.x - mcPlaying.x - 10;			mcControls.mcBackground.width = stage.stageWidth - mcControls.x		}				public function Play() {			if(mcPlaylist.Playing != null && mcPlaylist.Playing.Paused) {				channel = track.play(channel.position);				mcPlaylist.Playing.Paused = false;			}			else {				if(channel != null) {					channel.stop();					track.close();				}									track = new Sound(new URLRequest(mcPlaylist.Playing.TrackInfo.Location));				track.addEventListener(ProgressEvent.PROGRESS, BufferProgress);				track.addEventListener(Event.COMPLETE, BufferComplete);								channel = track.play();				channel.addEventListener(Event.SOUND_COMPLETE, TrackComplete);							mcControls.btnPlay.visible = false;				mcControls.btnPause.x = mcControls.btnPlay.x;				mcControls.btnPause.y = mcControls.btnPlay.y;				mcControls.btnPause.visible = true;			}			Volume(mcControls.mcVolume.VolumeControl);		}				public function Stop() {			channel.stop();		}				public function Next() {			var index:int = mcPlaylist.Tracks.indexOf(mcPlaylist.Playing);			mcPlaylist.Tracks[++index % mcPlaylist.Tracks.length].dispatchEvent(new Event(MouseEvent.CLICK));		}				public function Previous() {			var index:int = mcPlaylist.Tracks.indexOf(mcPlaylist.Playing);			if(index > 0) {				mcPlaylist.Tracks[--index].dispatchEvent(new Event(MouseEvent.CLICK));			}			else {				mcPlaylist.Tracks[mcPlaylist.Tracks.length - 1].dispatchEvent(new Event(MouseEvent.CLICK));			}		}				public function Pause() {			mcPlaylist.Playing.Paused = true;			channel.stop();		}				private function BufferProgress(e:ProgressEvent) {			trackLength = e.bytesTotal;			var total = Math.round(e.bytesLoaded * 100 / e.bytesTotal);			mcPlaying.txtPlaying.text = 'Buffering: ' + total +'%';			mcPlaying.mcBufferProgressBar.width = Math.round(e.bytesLoaded * mcPlaying.width / e.bytesTotal);		}				function BufferComplete(e:Event) {			var trackInfo = mcPlaylist.Playing.TrackInfo;			mcPlaying.txtPlaying.text = trackInfo.TrackNum + '. ' + trackInfo.Album + ' - ' + trackInfo.Title;			mcPlaylist.Playing.IsLoaded = true;		}				function TrackComplete(e:Event) {			Next();		}	}}